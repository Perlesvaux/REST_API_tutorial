0- Install Java and Maven:
sudo apt install default-jdk    ##Check version with: java -version
sudo apt install maven          ##Check version with: mvn --version


1- TAKE CARE OF THE DATABASE FIRST!:
An empty database & an user with enough privileges will be enough  ##{SELECT INSERT UPDATE DELETE}
sudo apt install mysql-server   ##Installing MySQL
sudo mysql_secure_installation  ##Wizard to improve security.
systemctl status mysql          ##If inactive: systemctl start mysql. Runs at localhost:3306
sudo mysql                      ##Enters MySQL CLI. Check from which port it's running: SHOW VARIABLES LIKE 'port';
CREATE DATABASE databasename;   ##same as:  CREATE SCHEMA schemaname; To view all databases: SHOW DATABASES;
CREATE USER 'username'@'localhost' IDENTIFIED BY 'enterPasswordHere';              ##to view all users: SELECT USER, HOST from mysql.user;
GRANT INSERT, SELECT, UPDATE, DELETE ON databasename.* to 'username'@'localhost';  ##view all grants: SHOW GRANTS FOR 'username'@'localhost'; | note:  *.* == allDatabases.allTables

New user can now access MySQL like this: mysql -u username -p                      ##A password-prompt will ensue. For now, 'databasename' should be empty. Check with: USE databasename; SHOW TABLES;


2- Create a new maven project:
Use the ###*Springboot Initializr###*     ^^^https://start.spring.io/^^^
Try ###*this one###* out!    ^^^https://start.spring.io/#!type=maven-project&language=java&platformVersion=2.7.14&packaging=jar&jvmVersion=11&groupId=school&artifactId=roster&name=roster&description=Demo%20project%20for%20Spring%20Boot&packageName=school.roster&dependencies=web,data-jpa,thymeleaf,mysql^^^
(i.e. Language: Java|Project: Maven|Spring Boot: 2.7.13|Packaging: Jar|Java: 11)          ##Working with current setup: Java version: 11.0.19 | Apache Maven 3.6.3

Include these dependencies:
Spring Web                      ##Build web, including RESTful, applications using Spring MVC. Uses Apache Tomcat as the default embedded container.
MySQL Driver                    ##MySQL JDBC driver (Appears in 'pom.xml' as: 'mysql-connector-j').
Spring Data JPA                 ##Automates creation of tables and columns.
Thymeleaf                       ##Server-side Java template engine

Upon un-Zipping the file, a "pom.xml" will be found at the "root of the project".


3- Connecting the database to the backend:
From the "root of the project", locate this file: src/main/resources/application.properties
Add these lines to that configuration file:

spring.datasource.url=jdbc:mysql://localhost:3306/databasename                     ##replace 'databasename'! | Or: spring.datasource.url=jdbc:mysql://localhost:3306/databasename?useSSL=false&serverTimezone=UTC
spring.datasource.username=userNameHere                                            ##replace 'userNameHere'!
spring.datasource.password=enterPasswordHere                                       ##replace with user's password!
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver                       ##Keep the same
spring.jpa.hibernate.ddl-auto=update                                               ##Keep the same


4- If everything is OK, it should compile...:
mvn clean package               ##Or: mvn clean test | mvn clean install
java -jar target/PROJECT.jar    ##Or, in cases where you have a 'main' method: java -cp target/PROJECT.jar com.project.Main

It should run on localhost:8080

now let's work on the REST-API itself. it's made up of a CONTROLLER that interacts with a database through a REPOSITORY of MODELs.
To put it simple:  "API's repository" = "database table"; "API model" = "database entry/row".
The end user accesses the back-end through the "API's controller", which is a series of mappings of: URL end-points + functions.
Use this directory "src/main/java/PROJECT/" to code the following classes:


5- Model (i.e. Student.java):
This class is an abstraction of database entry.
PNK*** import javax.persistence.*;
PNK*** //indicates this class is an entry in a database. A table modeled after this schema is created automatically if it doesn't yet exist.
PNK*** @Entity
PNK*** public class Student{
PNK***
PNK***     //indicates this variable is the 'primary key' and uniquely identifies each entry
PNK***     @Id
PNK***     //indicates each primary key will be automatically generated. End-user only needs to enter the other columns (name and age).
PNK***     @GeneratedValue(strategy=GenerationType.IDENTITY)
PNK***     private long id;
PNK***
PNK***     //indicates it's a field (column) in the database.
PNK***     @Column
PNK***     private String name;
PNK***
PNK***     @Column
PNK***     private int age;
PNK***
PNK***     //getters and setters!
PNK***     public long getId(){
PNK***
PNK***         return this.id;
PNK***     }
PNK***
PNK***     public String getName(){
PNK***         return this.name;
PNK***     }
PNK***
PNK***     public int getAge(){
PNK***         return this.age;
PNK***     }
PNK***
PNK***     public void setId(int id){
PNK***         this.id = id;
PNK***     }
PNK***
PNK***     public void setName(String name){
PNK***         this.name = name;
PNK***     }
PNK***
PNK***     public void setAge(int age){
PNK***         this.age = age;
PNK***     }
PNK*** }


6- Repository (i.e. Classroom.java):
This class is an abstraction of a database table.
PNK*** import org.springframework.data.jpa.repository.JpaRepository;
PNK*** //i.e. This is a repository of 'Student' objects. Each uniquely identified by a 'Long' variable (i.e. id)
PNK*** public interface Classroom extends JpaRepository<Student, Long>{}

7- Controller (i.e. SchoolController.java):
This class is what the end-user interacts with.
PNK*** import org.springframework.web.bind.annotation.RestController;
PNK*** import org.springframework.web.bind.annotation.PathVariable;
PNK*** import org.springframework.web.bind.annotation.RequestBody;
PNK*** import org.springframework.web.bind.annotation.GetMapping;
PNK*** import org.springframework.web.bind.annotation.PostMapping;
PNK*** import org.springframework.web.bind.annotation.PutMapping;
PNK*** import org.springframework.web.bind.annotation.DeleteMapping;
PNK*** import org.springframework.beans.factory.annotation.Autowired;
PNK*** import java.util.*;
PNK***
PNK*** @RestController
PNK*** public class SchoolController{
PNK***     @Autowired
PNK***     private Classroom room;  //Repository injection
PNK***
PNK***     @GetMapping(value="/")
PNK***     public String homeScreen(){
PNK***         return "Welcome!";
PNK***     }
PNK***
PNK***     @GetMapping(value="/students")
PNK***     public List<Student> getStudents(){
PNK***         return room.findAll();
PNK***     }
PNK***
PNK***     @PostMapping(value="/enroll")
PNK***     public String enroll(@RequestBody Student scholar){
PNK***         room.save(scholar);
PNK***         return "New student added...";
PNK***     }
PNK***
PNK***     @DeleteMapping(value="/remove/{id}")
PNK***     public String removeStudent(@PathVariable long id){
PNK***         Student selected = room.findById(id).get();
PNK***         selected.delete(selected);
PNK***         return "Student deleted";
PNK***     }
PNK***
PNK***     @PutMapping(value="/edit")
PNK***     public String editStudent(@PathVariable long id, @RequestBody Student scholar){
PNK***         Student selected = room.findById(id).get();
PNK***         selected.setName(scholar.getName());
PNK***         selected.setAge(scholar.getAge());
PNK***         room.save(selected);
PNK***         return "Student edited...";
PNK***     }
PNK***
PNK*** }


8- REST-Controller is now READY!:
Use Postman to send GET, POST, PUT, DELETE requests.
mvn clean package               ##Compile and test!
java -jar target/PROJECT.jar    ##or: java -cp target/PROJECT.jar com.company.project.Mainclass

If it's up and running, go to:  localhost:8080/

in postman, try:
POST     localhost:8080/enroll     Body>raw>JSON
{
    "name": "John",
    "age": 38
}


9-Now let's create the MVC-Controller. (i.e. SchoolRenderer.java):
Thymeleaf is used by this class to render templates stored at 'src/main/resources/templates/' (i.e. index.html)
PNK*** import org.springframework.stereotype.Controller;
PNK*** import org.springframework.web.bind.annotation.*;
PNK***
PNK*** @Controller
PNK*** public class Renderer{
PNK***
PNK***     @GetMapping("/")
PNK***     public String showIndexPage(){
PNK***         return "jsform";
PNK***     }
PNK*** }


10- Now it's time to implement the front-end:

I'll leave the "(USER_INPUT)" retrieval up to you. What you need to know is the bread and butter; how to use the "fetch" API to send HTTP requests.

BLU*** //--GET--
BLU*** fetch("/students")
BLU*** .then(response => response.json())
BLU*** .then(data => {//i.e. 'data' is a list of Student-Objects//})
BLU*** .catch(error => {console.log("Error: ", error)});
BLU***
BLU***
BLU*** //--POST--
BLU*** fetch("/enroll",
BLU*** {
BLU***     method:"POST",
BLU***     headers:{"Content-Type":"application/json"}
BLU***     body: JSON.stringify(USER_INPUT)
BLU*** })
BLU*** .catch(error => {console.log("Error: ", error)});
BLU***
BLU***
BLU*** //--DELETE--
BLU*** fetch(`/remove/${id}`,
BLU*** {
BLU***     method:"DELETE",
BLU*** })
BLU*** .catch(error => {console.log("Error: ", error)});
BLU***
BLU***
BLU*** //--PUT--
BLU*** fetch(`/edit/${id}`,
BLU*** {
BLU***     method: "PUT",
BLU***     headers: {"Content-Type":"application/json"},
BLU***     body: JSON.stringify(USER_INPUT)
BLU*** })
BLU*** .catch(error => {console.log("Error: ", error)});



Alternatively, you can use "async" and "await" for cleaner code:

BLU*** //--GET--
BLU*** async function fetchItems() {
BLU***   try {
BLU***          const response = await fetch('/enrolled');
BLU***          const data = await response.json();
BLU***          //handle request
BLU***       } catch (error) {
BLU***      console.error('Error:', error);
BLU***       }
BLU*** }
BLU***
BLU***
BLU*** //--POST--
BLU***  async function addStudent() {
BLU***  try  {
BLU***      await fetch('/enroll', POSTmsg());
BLU***      //handle request
BLU***       } catch (error) {
BLU***      console.error('Error:', error);
BLU***       }
BLU*** }
BLU***
BLU*** //--DELETE--
BLU*** async function deleteStudent(each_id){
BLU***   try {
BLU***      await fetch(`/remove/${each_id}`, {method: 'DELETE'});
BLU***      //handle request
BLU***       } catch (error) {
BLU***      console.error('Error:', error);
BLU***       }
BLU*** }
BLU***
BLU***
BLU*** //--PUT--
BLU*** async function updateStudent(each_id){
BLU***    try{
BLU***      await fetch(`/modify/${each_id}`, PUTmsg());
BLU***      //handle request
BLU***       } catch (error) {
BLU***      console.error('Error:', error);
BLU***       }
BLU*** }

