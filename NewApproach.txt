0- Install Java and Maven:
sudo apt install default-jdk    ##Check version with: java -version
sudo apt install maven          ##Check version with: mvn --version


1- TAKE CARE OF THE DATABASE FIRST! (an empty database & an user with enough privileges {SELECT INSERT UPDATE DELETE} will be enough):
sudo apt install mysql-server   ##Installing MySQL
sudo mysql_secure_installation  ##Wizard to improve security.
systemctl status mysql          ##If inactive: systemctl start mysql. Runs at localhost:3306
sudo mysql                      ##Enters MySQL CLI. Check from which port it's running: SHOW VARIABLES LIKE 'port';
CREATE DATABASE databasename;   ##same as:  CREATE SCHEMA schemaname; To view all databases: SHOW DATABASES;
CREATE USER 'username'@'localhost' IDENTIFIED BY 'enterPasswordHere';              ##to view all users: SELECT USER, HOST from mysql.user;
GRANT INSERT, SELECT, UPDATE, DELETE ON databasename.* to 'username'@'localhost';  ##view all grants: SHOW GRANTS FOR 'username'@'localhost'; | note:  *.* == allDatabases.allTables

New user can now access MySQL like this: mysql -u username -p                      ##A password-prompt will ensue. For now, 'databasename' should be empty. Check with: USE databasename; SHOW TABLES;


2- Create a project with https://start.spring.io/ (Springboot Initializr):         ##Try this one out! https://start.spring.io/#!type=maven-project&language=java&platformVersion=2.7.14&packaging=jar&jvmVersion=11&groupId=school&artifactId=roster&name=roster&description=Demo%20project%20for%20Spring%20Boot&packageName=school.roster&dependencies=web,data-jpa,thymeleaf,mysql
(i.e.: Language: Java|Project: Maven|Spring Boot: 2.7.13|Packaging: Jar|Java: 11)          ##Working with current setup: Java version: 11.0.19 | Apache Maven 3.6.3

Include these dependencies:
Spring Web                      ##Build web, including RESTful, applications using Spring MVC. Uses Apache Tomcat as the default embedded container.
MySQL Driver                    ##MySQL JDBC driver (Appears in 'pom.xml' as: 'mysql-connector-j').
Spring Data JPA                 ##Automates creation of tables and columns.
Thymeleaf                       ##Server-side Java template engine

Upon un-Zipping the file, a "pom.xml" will be found at the "root of the project".


3- Editing the src/main/resources/application.properties configuration file:
From the "root of the project", go to the "application.properties" file located at "src/main/resources/" and include these:
spring.datasource.url=jdbc:mysql://localhost:3306/databasename                     ##replace 'databasename'! | Or: spring.datasource.url=jdbc:mysql://localhost:3306/databasename?useSSL=false&serverTimezone=UTC
spring.datasource.username=userNameHere                                            ##replace 'userNameHere'!
spring.datasource.password=enterPasswordHere                                       ##replace with user's password!
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver                       ##Keep the same
spring.jpa.hibernate.ddl-auto=update                                               ##Keep the same


4- If everything is OK, it should compile...:
mvn clean package               ##Or: mvn clean test | mvn clean install
java -jar target/PROJECT.jar    ##Or, in cases where you have a 'main' method: java -cp target/PROJECT.jar com.project.Main

It should run on localhost:8080

now let's work on the REST-API itself. it's made up of a CONTROLLER that interacts with a database through a REPOSITORY of MODELs.
To put it simple:  "API's repository" = "database table"; "API model" = "database entry/row".
The end user accesses the back-end through the "API's controller", which is a series of mappings of: URL end-points + functions.
Use this directory "src/main/java/PROJECT/" to code the following classes:


5- Model (i.e.: Student.java):  ##Abstraction of database entry
JAVA*** import javax.persistence.*;
JAVA*** //indicates this class is an entry in a database. A table modeled after this schema is created automatically if it doesn't yet exist.
JAVA*** @Entity
JAVA*** public class Student{
JAVA***
JAVA***     //indicates this variable is the 'primary key' and uniquely identifies each entry
JAVA***     @Id
JAVA***     //indicates each primary key will be automatically generated. End-user only needs to enter the other columns (name and age).
JAVA***     @GeneratedValue(strategy=GenerationType.IDENTITY)
JAVA***     private long id;
JAVA***
JAVA***     //indicates it's a field (column) in the database.
JAVA***     @Column
JAVA***     private String name;
JAVA***
JAVA***     @Column
JAVA***     private int age;
JAVA***
JAVA***     //getters and setters!
JAVA***     public long getId(){
JAVA***
JAVA***         return this.id;
JAVA***     }
JAVA***
JAVA***     public String getName(){
JAVA***         return this.name;
JAVA***     }
JAVA***
JAVA***     public int getAge(){
JAVA***         return this.age;
JAVA***     }
JAVA***
JAVA***     public void setId(int id){
JAVA***         this.id = id;
JAVA***     }
JAVA***
JAVA***     public void setName(String name){
JAVA***         this.name = name;
JAVA***     }
JAVA***
JAVA***     public void setAge(int age){
JAVA***         this.age = age;
JAVA***     }
JAVA*** }


6- Repository (i.e.: Classroom.java):                                              ##Abstraction of database table
JAVA*** import org.springframework.data.jpa.repository.JpaRepository;
JAVA*** //i.e.: This is a repository of 'Student' objects. Each uniquely identified by a 'Long' variable (i.e.: id)
JAVA*** public interface Classroom extends JpaRepository<Student, Long>{}

7- Controller (i.e.: SchoolController.java)                                        ##What the end-user interacts with.
JAVA*** import org.springframework.web.bind.annotation.RestController;
JAVA*** import org.springframework.web.bind.annotation.PathVariable;
JAVA*** import org.springframework.web.bind.annotation.RequestBody;
JAVA*** import org.springframework.web.bind.annotation.GetMapping;
JAVA*** import org.springframework.web.bind.annotation.PostMapping;
JAVA*** import org.springframework.web.bind.annotation.PutMapping;
JAVA*** import org.springframework.web.bind.annotation.DeleteMapping;
JAVA*** import org.springframework.beans.factory.annotation.Autowired;
JAVA*** import java.util.*;
JAVA***
JAVA*** @RestController
JAVA*** public class SchoolController{
JAVA***     @Autowired
JAVA***     private Classroom room;  //Repository injection
JAVA***
JAVA***     @GetMapping(value="/")
JAVA***     public String homeScreen(){
JAVA***         return "Welcome!";
JAVA***     }
JAVA***
JAVA***     @GetMapping(value="/students")
JAVA***     public List<Student> getStudents(){
JAVA***         return room.findAll();
JAVA***     }
JAVA***
JAVA***     @PostMapping(value="/enroll")
JAVA***     public String enroll(@RequestBody Student scholar){
JAVA***         room.save(scholar);
JAVA***         return "New student added...";
JAVA***     }
JAVA***
JAVA***     @DeleteMapping(value="/remove/{id}")
JAVA***     public String removeStudent(@PathVariable long id){
JAVA***         Student selected = room.findById(id).get();
JAVA***         selected.delete(selected);
JAVA***         return "Student deleted";
JAVA***     }
JAVA***
JAVA***     @PutMapping(value="/edit")
JAVA***     public String editStudent(@PathVariable long id, @RequestBody Student scholar){
JAVA***         Student selected = room.findById(id).get();
JAVA***         selected.setName(scholar.getName());
JAVA***         selected.setAge(scholar.getAge());
JAVA***         room.save(selected);
JAVA***         return "Student edited...";
JAVA***     }
JAVA***
JAVA*** }


8- REST-Controller is now READY! Use Postman to send GET, POST, PUT, DELETE requests.
mvn clean package               ##Compile and test!
java -jar target/PROJECT.jar    ##or: java -cp target/PROJECT.jar com.company.project.Mainclass

If it's up and running, go to:  localhost:8080/

in postman, try:
POST     localhost:8080/enroll     Body>raw>JSON
{
    "name": "John",
    "age": 38
}


9-Now let's create the MVC-Controller. (i.e.: SchoolRenderer.java)                 ##Uses Thymeleaf to render html files (templates) at 'src/main/resources/templates/' (i.e.: index.html)
JAVA*** import org.springframework.stereotype.Controller;
JAVA*** import org.springframework.web.bind.annotation.*;
JAVA***
JAVA*** @Controller
JAVA*** public class Renderer{
JAVA***
JAVA***     @GetMapping("/")
JAVA***     public String showIndexPage(){
JAVA***         return "jsform";
JAVA***     }
JAVA*** }


10- Now it's time to implement the front-end.

I'll leave the "(USER_INPUT)" retrieval up to you. What you need to know is the bread and butter; how to use the "fetch" API to send HTTP requests.

JS*** //--GET--
JS*** fetch("/students")
JS*** .then(response => response.json())
JS*** .then(data => {//i.e.: 'data' is a list of Student-Objects//})
JS*** .catch(error => {console.log("Error: ", error)});
JS***
JS***
JS*** //--POST--
JS*** fetch("/enroll",
JS*** {
JS***     method:"POST",
JS***     headers:{"Content-Type":"application/json"}
JS***     body: JSON.stringify(USER_INPUT)
JS*** })
JS*** .catch(error => {console.log("Error: ", error)});
JS***
JS***
JS*** //--DELETE--
JS*** fetch(`/remove/${id}`,
JS*** {
JS***     method:"DELETE",
JS*** })
JS*** .catch(error => {console.log("Error: ", error)});
JS***
JS***
JS*** //--PUT--
JS*** fetch(`/edit/${id}`,
JS*** {
JS***     method: "PUT",
JS***     headers: {"Content-Type":"application/json"},
JS***     body: JSON.stringify(USER_INPUT)
JS*** })
JS*** .catch(error => {console.log("Error: ", error)});

